<?xml version="1.0" encoding="UTF-8" ?>
<project default="get-build"
	description="Tasks for upload project build and run depends operation">
	<target name="get-build" depends="init,get-build-properties"
		description="Setup project by high-level project build">
		<if>
			<or>
				<equals arg1="${get-build.cont}" arg2="Yes" casesensitive="false"
					trim="true"/>
				<istrue value="${get-build.cont}"/>
			</or>
			<then>
				<resolvepath propertyName="get-build.basedir_parent" file="${project.basedir}/.."/>

                <if>
                    <equals arg1="${get-build.deploy.vcs.type}" arg2="svn" />
                    <then>
                        <exec
                            command="svn checkout ${get-build.deploy.vcs.src} ${get-build.deploy.dst}"
                            passthru="true" checkreturn="true" level="info" />
                    </then>
                    <elseif>
                        <equals arg1="${get-build.deploy.vcs.type}" arg2="git" />
                        <then>
                            <exec
                                command="git clone ${get-build.deploy.vcs.src} ${get-build.deploy.dst}"
                                passthru="true" checkreturn="true" level="info" />
                        </then>
                    </elseif>
                    <elseif>
                        <equals arg1="${get-build.deploy.vcs.type}" arg2="hg" />
                        <then>
                            <exec
                                command="hg clone ${get-build.deploy.vcs.src} ${get-build.deploy.dst}"
                                passthru="true" checkreturn="true" level="info" />
                        </then>
                    </elseif>
                    <else>
                        <fail message="Unregistered VCS type ${get-build.deploy.vcs.type}" />
                    </else>
                </if>

				<phingcall target="get-build-setup">					<property name="get-build.basedir_parent" value="${get-build.basedir_parent}" />
				</phingcall>

				<echo>High-level build setup successful</echo>
				<phingcall target="help-setup" >
					<property name="help-setup.deploy.dst" value="${get-build.deploy.dst}" />
				<property name="help-setup.user.property.filename" value="${get-build.user.property.filename}" />
				</phingcall>
			</then>
			<else>
				<echo>Canceled</echo>
			</else>
		</if>
	</target>

	<target name="get-build-properties">
		<if>
            <isset property="path" />
            <then>
                <property name="get-build.deploy.root" value="${path}" />
            </then>
            <else>
                <propertyprompt propertyName="get-build.deploy.root"
			promptText="Enter, please, a full path - a directory name, where the project will be installed" />
		</else>
        </if>
        <property name="get-build.deploy.dst" value="${get-build.deploy.root}/build" />

        <if>
            <isset property="src" />
            <then>
                <property name="get-build.deploy.vcs.src" value="${src}" />
            </then>
            <else>
                <propertyprompt propertyName="get-build.deploy.vcs.src"
                    promptText="Enter, please, SVN|GIT url, where I could find build files" />
            </else>
        </if>

        <if>
            <isset property="vcs" />
            <then>
                <property name="get-build.deploy.vcs.type" value="${vcs}" />
            </then>
            <else>
                <propertyprompt propertyName="get-build.deploy.vcs.type"
			defaultValue="svn" promptText="I'm just a stupid robot, so I need to know, what type of version control system you use for link above" />
            </else>
        </if>
			        <if>
            <isset property="host" />
            <then>
                <property name="get-build.hosts.public" value="${host}" />
		</then>
            <else>
                <propertyprompt propertyName="get-build.hosts.public"
			promptText="Enter project host" />

</else>
        </if>

		<echo>VCS type: ${get-build.deploy.vcs.type}</echo>
		<echo>VCS checkout url: ${get-build.deploy.vcs.src}</echo>
		<echo>Checkout to: ${get-build.deploy.dst}</echo>

<echo>Project host: ${get-build.hosts.public}</echo>

        <!-- Дублируем для пользовательского конфига -->
        <property name="born-properties.paths.root" value="${get-build.deploy.root}" />
        <property name="born-build.hosts.public" value="${get-build.hosts.public}" />


		<if>
			<available file="${get-build.deploy.dst}"/>
			<then>
				<echo level="warning">File ${get-build.deploy.dst} exists</echo>
				<propertyprompt propertyName="get-build.cont"
					defaultValue="No" promptCharacter="Yes|No" promptText="Do you want continue?" />
			</then>
			<else>
				<property name="get-build.cont" value="Yes"/>
			</else>
		</if>
		
		<exec command="whoami" outputProperty="get-build.username"></exec>		
		<property name="get-build.user.property.filename"
			value="${get-build.deploy.dst}/properties/extends/users/${build.username}.xml" />
	</target>

	<target name="get-build-setup">
		<if>
			<not>
				<equals arg1="${get-build.deploy.root}" arg2="${get-build.basedir_parent}"/>
			</not>
			<then>
				<symlink target="${project.basedir}" link="${get-build.deploy.dst}/haru"
					overwrite="true" />
			</then>
		</if>		
		
				<if>
			<not>
				<available file="${get-build.user.property.filename}" />
			</not>
			<then>
				<if>
					<not>
						<available file="${get-build.deploy.dst}/properties/extends/users/example.xml" />
					</not>
					<then>
						<copy file="${build.tmpldir.build}/properties/extends/users/example.xml"
							tofile="${get-build.user.property.filename}" overwrite="true" >
							<filterchain>
				    			<expandproperties />
				  			</filterchain>
						</copy>
					</then>
					<else>
						<copy file="${get-build.deploy.dst}/properties/extends/users/example.xml"
					tofile="${get-build.user.property.filename}" overwrite="true" >
							<filterchain>
				    			<expandproperties />
				  			</filterchain>
						</copy>
					</else>
				</if>	

			</then>
		</if>
		
		<copy file="${build.tmpldir.build}/bin/env.tpl" tofile="${get-build.deploy.dst}/bin/env">
			<filterchain>
    			<expandproperties />
  			</filterchain>
		</copy>

        <copy file="${build.tmpldir.build}/bin/phing" tofile="${get-build.deploy.dst}/bin/phing" />
        <chmod file="${get-build.deploy.dst}/bin/phing" mode="0555" />
        
        <copy file="${build.tmpldir.build}/bin/prop" tofile="${get-build.deploy.dst}/bin/prop" />
        <propertyprompt propertyName="get-build.deploy.setup"
            promptText="Setup project? (yes or no)"
            useExistingValue="1" 
            defaultValue="1" />
        <property name="get-build.deploy.setup.command" value="${get-build.deploy.dst}/bin/phing install configure link" />
        <if>
            <istrue value="${get-build.deploy.setup}" />
            <then>
                <echo>Setup cmd: ${get-build.deploy.setup.command}</echo>
                <exec command="${get-build.deploy.setup.command}" passthru="true" checkreturn="true" level="info" />
			</then>
		</if>
	</target>
</project>